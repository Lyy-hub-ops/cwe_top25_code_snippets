@GET
	@Path("explore/prevalence/{cohortId}/{sourceKey}/{covariateId}")
	@Produces(MediaType.APPLICATION_JSON)
	public List<PrevalenceStat> getCohortFeaturePrevalenceStatsByVocab(
		@PathParam("cohortId") final long cohortId,
		@PathParam("sourceKey") final String sourceKey,
		@PathParam("covariateId") final long covariateId
	) {
		Source source = getSourceRepository().findBySourceKey(sourceKey);
    String resultsSchema = source.getTableQualifier(SourceDaimon.DaimonType.Results);
		String cdmSchema = source.getTableQualifier(SourceDaimon.DaimonType.CDM);

		String categoricalQuery = SqlRender.renderSql(
			QUERY_COVARIATE_STATS_VOCAB,
			new String[]{"cdm_database_schema", "cdm_results_schema", "cohort_definition_id", "covariate_id"},
			new String[]{cdmSchema, resultsSchema, Long.toString(cohortId), Long.toString(covariateId)}
		);

		String translatedSql = SqlTranslate.translateSql(categoricalQuery, source.getSourceDialect(), SessionUtils.sessionId(), resultsSchema);
		List<PrevalenceStat> prevalenceStats = this.getSourceJdbcTemplate(source).query(translatedSql, (rs, rowNum) -> {
			PrevalenceStat mappedRow = new PrevalenceStat() {
				{
					covariateId = rs.getLong("covariate_id");
					covariateName = rs.getString("covariate_name");
					analysisId = rs.getLong("analysis_id");
					analysisName = getAnalysisName( rs.getString("analysis_name"), rs.getString("domain_id"));
					domainId = rs.getString("domain_id");
					timeWindow = getTimeWindow(rs.getString("analysis_name"));
					conceptId = rs.getLong("concept_id");
					conceptName = rs.getString("concept_name");
					countValue = rs.getLong("count_value");
					statValue = new BigDecimal(rs.getDouble("stat_value")).setScale(5, RoundingMode.DOWN);
					distance = rs.getLong("min_levels_of_separation");
				}
			};
			return mappedRow;
		});

		return prevalenceStats;
	}